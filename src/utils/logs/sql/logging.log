sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 08:52:36] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 08:52:37] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 08:55:41] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 08:55:42] [DEBUG]: Executing (default): select COUNT(*) as count FROM articles as a where a.title like '%%'

sql [2021-07-08 08:55:42] [DEBUG]: Executing (default): SELECT
      a.id AS id,
      a.title AS title,
      a.imgUrl AS imgUrl,
      r.readNum AS readNum,
      a.createdAt AS createdAt,
      r.likeNum AS likeNum,
      mdt.NAMES AS tagNames 
    FROM
      articles AS a
      JOIN readlikes AS r ON a.id = r.articleId 
      LEFT JOIN (
      SELECT
        GROUP_CONCAT( tc.NAME ) AS NAMES,
        tca.articleId AS articleId 
      FROM
        tagclouds AS tc
        LEFT JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      GROUP BY
        tca.articleId 
      ) AS mdt ON mdt.articleId = a.id 
    ORDER BY
      a.createdAt DESC 
      LIMIT 0, 5 ;

sql [2021-07-08 08:55:42] [DEBUG]: Executing (default): SELECT
        a.id AS id,
        a.title AS title,
        a.imgUrl AS imgUrl,
        r.readNum AS readNum,
        a.createdAt AS createdAt,
        r.likeNum AS likeNum,
        mdt.NAMES AS tagNames,
        ( CASE WHEN c.comentNum IS NULL THEN 0 ELSE c.comentNum END ) comentNum 
      FROM
        articles AS a
        JOIN readlikes AS r ON a.id = r.articleId 
        AND a.title LIKE '%%'
        JOIN (
        SELECT
          GROUP_CONCAT( tc.NAME ) AS NAMES,
          tca.articleId AS articleId 
        FROM
          tagclouds AS tc
          JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
        GROUP BY
          tca.articleId 
        ) AS mdt ON mdt.articleId = a.id
        LEFT JOIN ( SELECT count( id ) AS comentNum, articleId AS carticleId FROM comments GROUP BY articleId ) AS c ON a.id = c.carticleId 
      ORDER BY
        a.createdAt DESC 
        LIMIT 0, 12 ;

sql [2021-07-08 08:55:51] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 08:55:51] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 08:55:52] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 08:55:52] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 08:56:53] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 08:56:54] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 08:56:54] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 08:56:54] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 08:56:54] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 09:43:10] [DEBUG]: Executing (default): SELECT
      a.id AS id,
      a.title AS title,
      a.imgUrl AS imgUrl,
      r.readNum AS readNum,
      a.createdAt AS createdAt,
      r.likeNum AS likeNum,
      mdt.NAMES AS tagNames 
    FROM
      articles AS a
      JOIN readlikes AS r ON a.id = r.articleId 
      LEFT JOIN (
      SELECT
        GROUP_CONCAT( tc.NAME ) AS NAMES,
        tca.articleId AS articleId 
      FROM
        tagclouds AS tc
        LEFT JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      GROUP BY
        tca.articleId 
      ) AS mdt ON mdt.articleId = a.id 
    ORDER BY
      a.createdAt DESC 
      LIMIT 0, 5 ;

sql [2021-07-08 09:43:10] [DEBUG]: Executing (default): select COUNT(*) as count FROM articles as a where a.title like '%%'

sql [2021-07-08 09:43:10] [DEBUG]: Executing (default): SELECT
        a.id AS id,
        a.title AS title,
        a.imgUrl AS imgUrl,
        r.readNum AS readNum,
        a.createdAt AS createdAt,
        r.likeNum AS likeNum,
        mdt.NAMES AS tagNames,
        ( CASE WHEN c.comentNum IS NULL THEN 0 ELSE c.comentNum END ) comentNum 
      FROM
        articles AS a
        JOIN readlikes AS r ON a.id = r.articleId 
        AND a.title LIKE '%%'
        JOIN (
        SELECT
          GROUP_CONCAT( tc.NAME ) AS NAMES,
          tca.articleId AS articleId 
        FROM
          tagclouds AS tc
          JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
        GROUP BY
          tca.articleId 
        ) AS mdt ON mdt.articleId = a.id
        LEFT JOIN ( SELECT count( id ) AS comentNum, articleId AS carticleId FROM comments GROUP BY articleId ) AS c ON a.id = c.carticleId 
      ORDER BY
        a.createdAt DESC 
        LIMIT 0, 12 ;

sql [2021-07-08 09:59:10] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = 'twinkle' AND `user`.`accounter` = 'cll123456' AND `user`.`email` = '6254321abc@gmail.com' AND `user`.`avatar` = 'https://avatars.githubusercontent.com/u/41314419?v=4')) LIMIT 1;

sql [2021-07-08 10:14:59] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 10:15:00] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 10:15:00] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 10:15:00] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 10:15:00] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 10:18:16] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 10:18:17] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 10:18:18] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 10:18:18] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 10:18:18] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 10:18:42] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 10:18:43] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 10:18:43] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 10:18:43] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 10:18:43] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 10:23:42] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 10:23:43] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 10:23:43] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 10:23:43] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 10:23:43] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 10:59:54] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:03:55] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:06:42] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 11:09:57] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:36:15] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:36:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:15] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:36:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:36:15] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:36:16] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:37:13] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:37:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:13] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:14] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:33] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:37:56] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:39:13] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:39:50] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:41:08] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:42:35] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:45:27] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:47:34] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:48:27] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:48:58] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:51:15] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:51:33] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:04] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:13] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 13:53:33] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 13:53:37] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 13:53:37] [DEBUG]: Executing (default): INSERT INTO `users` (`id`,`nickName`,`accounter`,`email`,`avatar`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 14:04:51] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 15:26:47] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 15:26:48] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 15:26:49] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 15:26:49] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 15:26:49] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 16:34:51] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 16:34:52] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 16:34:52] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 16:34:52] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 16:34:52] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 16:38:22] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 16:38:23] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 16:38:23] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 16:38:23] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 16:38:23] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 16:42:03] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 16:42:04] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 16:42:04] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 16:42:04] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 16:42:04] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 16:42:54] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 16:42:55] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 16:42:55] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 16:42:55] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 16:42:55] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 17:00:38] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 17:00:40] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 17:00:40] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 17:00:40] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 17:00:40] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 17:01:00] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 17:01:01] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 17:01:01] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 17:01:01] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 17:01:01] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 17:03:03] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 17:03:05] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 17:03:05] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 17:03:05] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 17:03:05] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 17:08:02] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 17:08:03] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 17:08:03] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 17:08:03] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 17:08:03] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 17:10:04] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 17:10:05] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 17:10:05] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 17:10:05] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 17:10:05] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 17:41:29] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 17:41:30] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 17:41:30] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 17:41:30] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 17:41:30] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 19:13:11] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 19:13:11] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 19:13:11] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 19:13:11] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 19:13:11] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 19:17:52] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 19:18:35] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 19:19:03] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:27:20] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:31:02] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:31:45] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:33:45] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:36:31] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:37:47] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 19:38:26] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 19:40:33] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 19:40:35] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 19:40:35] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 19:40:35] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 19:40:35] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 19:40:44] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 19:40:46] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 19:40:46] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 19:40:46] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 19:40:46] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 19:41:00] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 19:41:01] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 19:41:01] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 19:41:01] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 19:41:01] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 19:41:37] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 19:41:38] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 19:41:38] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 19:41:38] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 19:41:38] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:17:15] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 20:17:16] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:17:16] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:17:16] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:17:16] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:17:31] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 20:17:33] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:17:33] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:17:33] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:17:33] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:19:03] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 20:19:04] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:19:04] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:19:04] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:19:04] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:19:27] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 20:19:29] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:19:29] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:19:29] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:19:29] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:19:34] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:27:41] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:27:41] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:41] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:27:41] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:27:41] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:27:41] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:27:55] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:27:56] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:27:56] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:28:02] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:28:26] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:28:31] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:36:43] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:36:52] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:36:52] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:36:53] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:36:53] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:37:12] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:37:44] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:37:45] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:37:48] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 20:37:50] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:37:50] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:37:50] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:37:50] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:02] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:14] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:41:19] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:41:55] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:44:50] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:44:59] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:44:59] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:44:59] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:44:59] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:45:48] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:45:48] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:45:48] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:45:48] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:45:57] [DEBUG]: Executing (default): SELECT
      a.id AS id,
      a.title AS title,
      a.imgUrl AS imgUrl,
      r.readNum AS readNum,
      a.createdAt AS createdAt,
      r.likeNum AS likeNum,
      mdt.NAMES AS tagNames 
    FROM
      articles AS a
      JOIN readlikes AS r ON a.id = r.articleId 
      LEFT JOIN (
      SELECT
        GROUP_CONCAT( tc.NAME ) AS NAMES,
        tca.articleId AS articleId 
      FROM
        tagclouds AS tc
        LEFT JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      GROUP BY
        tca.articleId 
      ) AS mdt ON mdt.articleId = a.id 
    ORDER BY
      a.createdAt DESC 
      LIMIT 0, 5 ;

sql [2021-07-08 20:45:57] [DEBUG]: Executing (default): select COUNT(*) as count FROM articles as a where a.title like '%%'

sql [2021-07-08 20:45:57] [DEBUG]: Executing (default): SELECT
        a.id AS id,
        a.title AS title,
        a.imgUrl AS imgUrl,
        r.readNum AS readNum,
        a.createdAt AS createdAt,
        r.likeNum AS likeNum,
        mdt.NAMES AS tagNames,
        ( CASE WHEN c.comentNum IS NULL THEN 0 ELSE c.comentNum END ) comentNum 
      FROM
        articles AS a
        JOIN readlikes AS r ON a.id = r.articleId 
        AND a.title LIKE '%%'
        JOIN (
        SELECT
          GROUP_CONCAT( tc.NAME ) AS NAMES,
          tca.articleId AS articleId 
        FROM
          tagclouds AS tc
          JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
        GROUP BY
          tca.articleId 
        ) AS mdt ON mdt.articleId = a.id
        LEFT JOIN ( SELECT count( id ) AS comentNum, articleId AS carticleId FROM comments GROUP BY articleId ) AS c ON a.id = c.carticleId 
      ORDER BY
        a.createdAt DESC 
        LIMIT 0, 12 ;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:48:17] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:48:24] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:48:24] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:48:24] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:48:24] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:49:05] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:49:05] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:49:05] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:49:06] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:49:14] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:49:14] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:49:14] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:49:14] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:52:31] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:52:37] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:53:15] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:53:25] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:53:25] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:53:25] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:53:25] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:53:31] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:54:20] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:55:03] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:55:04] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 20:55:04] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:58:23] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 20:58:57] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 21:08:02] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 21:08:03] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 21:08:03] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 21:08:03] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 21:08:03] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 21:50:17] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 21:50:17] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 21:50:18] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 21:50:18] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:50:49] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:52:11] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 21:54:07] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 21:54:07] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 21:54:07] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 21:54:07] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 21:57:45] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 21:58:40] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 21:58:41] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 21:58:41] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 21:58:41] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 21:58:41] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:16:40] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:16:40] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:16:40] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:16:40] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:16:59] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:17:00] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:17:00] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:17:00] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:17:00] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:17:09] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 22:18:24] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:18:24] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:18:24] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:18:24] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:18:33] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 22:18:36] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:18:36] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:18:36] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:18:36] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:19:51] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:19:52] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:19:52] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:19:52] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:19:52] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:20:00] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:20:01] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:20:01] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:20:02] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:20:02] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:20:07] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:20:08] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:20:08] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:20:08] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:20:08] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:20:13] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:20:14] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:20:14] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:20:14] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:20:14] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:20:23] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 22:20:26] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:20:26] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:20:26] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:20:26] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:21:22] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 22:21:24] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:21:24] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:21:24] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:21:24] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:21:58] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:21:59] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:21:59] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:21:59] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:21:59] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:22:55] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 22:22:57] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:22:57] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:22:58] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:22:58] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:23:42] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:23:43] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:23:43] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:23:43] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:23:43] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:24:42] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:24:43] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:24:43] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:24:43] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:24:43] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:24:49] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:24:50] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:24:50] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:24:50] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:24:50] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:25:55] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:25:57] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:25:57] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:25:57] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:25:57] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:26:13] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:26:14] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:26:14] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:26:14] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:26:14] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:26:21] [DEBUG]: Executing (default): SELECT `id`, `nickName`, `accounter`, `email`, `avatar`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `user` WHERE (`user`.`deletedAt` IS NULL AND (`user`.`nickName` = '陈亮亮' AND `user`.`accounter` = 'Cll12345' AND `user`.`email` = 'no email' AND `user`.`avatar` = 'https://portrait.gitee.com/uploads/avatars/user/675/2027490_Cll12345_1578964555.png')) LIMIT 1;

sql [2021-07-08 22:26:24] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:26:24] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:26:24] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:26:24] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:28:02] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:28:04] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:28:04] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:28:04] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:28:04] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:29:02] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:29:03] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:29:03] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:29:03] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:29:03] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:32:24] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:32:54] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

sql [2021-07-08 22:35:00] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:35:00] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:35:00] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:35:00] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:35:32] [DEBUG]: Executing (default): SELECT
      t.id as id,
      t.logo as imgUrl,
      t.name as title,
      COUNT( tc.articleId ) AS num 
    FROM
      tagclouds AS t,
      tagcloudarticles tc 
    WHERE
      t.id = tc.tagCloudId 
    GROUP BY
      t.NAME

sql [2021-07-08 22:35:33] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:35:33] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:35:33] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:35:33] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:35:45] [DEBUG]: Executing (default): SELECT
    a.title as title,
    a.createdAt as createdAt,
    a.content AS content,
    mid.tags AS tags,
    r.readNum AS readNum,
    r.likeNum AS likeNum
  FROM
    articles AS a
    JOIN (
    SELECT
      GROUP_CONCAT( tc.NAME, '' ) AS tags,
      tca.articleId AS articleId 
    FROM
      tagclouds AS tc
       JOIN tagcloudarticles AS tca ON tc.id = tca.tagCloudId 
      AND tca.articleId = 1 
    ) AS mid ON mid.articleId = a.id
     JOIN readlikes AS r ON r.articleId = a.id

sql [2021-07-08 22:35:45] [DEBUG]: Executing (default): SELECT
      c.content AS content,
      c.pid AS pid,
      c.id AS id,
      u.nickName AS nickName,
      u.accounter AS accounter,
      u.email AS email,
      u.avatar AS avatar,
      u.createdAt as  createdAt
    FROM
      comments AS c,
      users AS u 
    WHERE
      c.userId = u.id 
      AND c.articleId = 1 
      AND ISNULL( c.deletedAt ) 
    ORDER BY
      c.createdAt DESC

sql [2021-07-08 22:35:45] [DEBUG]: Executing (default): SELECT `id`, `readNum`, `likeNum`, `createdAt`, `updatedAt`, `deletedAt`, `articleId` FROM `readLikes` AS `readLike` WHERE (`readLike`.`deletedAt` IS NULL AND `readLike`.`articleId` = '1') LIMIT 1;

sql [2021-07-08 22:35:45] [DEBUG]: Executing (default): UPDATE `readLikes` SET `readNum`=?,`updatedAt`=? WHERE (`deletedAt` IS NULL AND `articleId` = ?)

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SELECT 1+1 AS result

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `articles` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '文章标题', `subTitle` VARCHAR(255) COMMENT '文章副标题', `imgUrl` VARCHAR(255) NOT NULL COMMENT '文章的图片，不能为空', `content` TEXT COMMENT '文章内容，存一个html文件', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `articles`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `readLikes` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `readNum` INTEGER COMMENT '文章阅读量', `likeNum` INTEGER COMMENT '文章点赞量', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `readLikes`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `nickName` VARCHAR(100) COMMENT '用户的昵称', `accounter` VARCHAR(100) NOT NULL COMMENT '账号', `email` VARCHAR(255) NOT NULL COMMENT '邮箱', `avatar` TEXT NOT NULL COMMENT '用户头像', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `users`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `content` TEXT COMMENT '评论内容', `pid` INTEGER COMMENT '父级id,用于处理评论的父级节点', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `articleId` INTEGER, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `comments`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `myselves` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `enName` VARCHAR(100) COMMENT '英文名字', `znName` VARCHAR(100) COMMENT '中文名字', `sex` TINYINT(1) COMMENT '性别', `selfIntroduce` VARCHAR(255) COMMENT '个人简介', `birthday` VARCHAR(100) COMMENT '出生日期', `startWork` VARCHAR(100) COMMENT '开始工作', `schoolName` VARCHAR(100) COMMENT '学校名称', `mayjor` VARCHAR(100) COMMENT '专业', `education` VARCHAR(100) COMMENT '学历', `companyName` VARCHAR(100) COMMENT '所属公司名称', `postName` VARCHAR(100) COMMENT '岗位名称', `industry` VARCHAR(100) COMMENT '所属行业', `skill` VARCHAR(255) COMMENT '个人的技能', `hobby` VARCHAR(255) COMMENT '兴趣爱好', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `myselves`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `projects` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `title` VARCHAR(255) NOT NULL COMMENT '项目的标题', `desc` TEXT COMMENT '项目描述', `projectUrl` VARCHAR(100) NOT NULL COMMENT '项目地址', `gitupUrl` VARCHAR(100) COMMENT 'gitup 地址', `imgUrl` VARCHAR(255) COMMENT '项目图片地址', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `projects`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `tagClouds` (`id` INTEGER auto_increment UNIQUE  COMMENT '自增主键id', `name` VARCHAR(100) NOT NULL COMMENT '标签名称', `code` VARCHAR(100) COMMENT '标签的code,备用', `logo` TEXT COMMENT '云图标的logo,是一个base64位的的字符串', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `tagClouds`

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): CREATE TABLE IF NOT EXISTS `TagCloudArticles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `tagCloudId` INTEGER , `articleId` INTEGER , PRIMARY KEY (`tagCloudId`, `articleId`), FOREIGN KEY (`tagCloudId`) REFERENCES `tagClouds` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`articleId`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;

sql [2021-07-08 22:36:58] [DEBUG]: Executing (default): SHOW INDEX FROM `TagCloudArticles`

